I would like you to help me setting up a project with a microservices-based architecture.
The services are:
-OrderService expose several endpoints.
'getOrdersInfo' endpoint to retrieve all the orders either closed or ongoing  from a mongodb database.
the Order data is made by: id, prodtype, order status, delivery date, customer, quantity.  
'makeNewOrder' endpoint to save new orders: it is a post endpoint, the data in the body is the same as "Order data".
'finishedProductDescription' provides the following informations about the available products : an id, a name, the product's price,raw materials needed and relative quantity and time needed to produce 1 unit.
This service publishes an event on the kafka topic 'newOrderTopic' when a new order comes in, with all the informations for that specific product. 
This service listens to the 'productStatusTopic' kafka topic for update about a specific order status.

-InventoryService expose the 'getInventory' endpoint to retrieve all the finished products and raw material currently in stock. The data retrieved  from this endpoint has  the following structure:
isRawMaterial : boolean, name:  string, id : number, quantity: number, minQuantityRequired: number.
listens to the 'newOrderTopic' for incoming orders, and it updates the quantity in stock subtracting the raw materials used 
for producing a specific product, and adding  a new finished product.
WHen the minQuantityRequired value for a specific raw product is less than a certain value, an event on the 'requiredPurchaseTopic' is emitted. This event contains the name of the product running low.
It listens to 'updateInventory' topic for new purchases.


-ProductionService 
listens to the 'newOrderTopic' for incoming orders. This Service business logic is totally mocked, after the quantity of time needed for producing this product it emits an event on 'productStatusTopic'.

-ManagementService
THis service starts with a budget of 20000, and every time a purchased is made, a certain value is subtracted from this value.
Everytime a product is sold, the budget is incremented by the price of the product sold.
It listens to the kafka topic 'requiredPurchaseTopic' to make new purchases, it decreases the budget by the amount required 
for that product and it publishes on 'updateInventory' 






Service	Responsibilities	Kafka Topics (Publish/Subscribe)
OrderService	Manage orders	✅ Publishes to newOrderTopic
✅ Listens to productStatusTopic
InventoryService	Manage inventory	✅ Listens to newOrderTopic
✅ Publishes to requiredPurchaseTopic
✅ Listens to updateInventory
ProductionService	Simulate production	✅ Listens to newOrderTopic
✅ Publishes to productStatusTopic
ManagementService	Manage budget	✅ Listens to requiredPurchaseTopic
✅ Publishes to updateInventory



Creating a KafkaConfig is considered a best practice when:
You have multiple Kafka producers/consumers.
You need custom topics or fine-grained tuning.
You want better organization in your project.

OrderService
Expose REST APIs:
GET /orders → retrieve all orders
POST /orders → create a new order
GET /products → retrieve finished products description
Publishes an event to newOrderTopic when a new order is created.
Listens to productStatusTopic to update orders with new status (optional updating MongoDB).
Spring Boot starter

REST Controller (/orders)

MongoDB persistence

Kafka Producer to newOrderTopic

YML configuration to connect MongoDB + Kafka

All neatly separated into model, repository, service, and controller



 InventoryService
Expose REST API:
GET /inventory → retrieve all inventory items.
Listens to:
newOrderTopic to update inventory stock.
updateInventory topic when purchases arrive.
Publishes:
To requiredPurchaseTopic when raw materials are low.
REST Controller (/inventory)

MongoDB persistence for inventory items

Kafka Consumer listening to newOrderTopic

Kafka Producer to requiredPurchaseTopic

OrderEvent model for Kafka event structure

Application YML (MongoDB on port 27018, Kafka on 9092)



ProductionService
No HTTP API needed.
Listens to:
newOrderTopic.
After a delay (based on product's production time), publishes to productStatusTopic.




ManagementService
No HTTP API needed.
Listens to:
requiredPurchaseTopic (simulates buying raw materials, reducing budget).
Publishes:
To updateInventory when purchase completed.